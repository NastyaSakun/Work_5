1. Что такое производный и базовый классы?

Исходный класс называется базовым или родительским, а производный – подклассом или потомком. Производный класс представляет собой расширение или модификацию базового класса.

2. В чем заключена основная задача наследования?

Наследование - это механизм получения нового класса на основе уже существующего.

3. Пусть базовый класс содержит метод basefunc(), а производный класс не имеет метода с таким именем. Может ли объект производного класса иметь доступ к методу basefunc()? Если да, то при каких условиях?

Да.

4. Напишите объявление конструктора без аргументов для производного класса B, который будет вызывать конструктор без аргументов базового класса A.

Class A

{ public A() {} }

Class B : A

{ public B() {} }

5. Что такое полиморфизм? Приведите пример.

Способность к изменению функций, унаследованных от базового класса.

6. Определите назначение виртуальных функций.

При наследовании нередко возникает необходимость при наследовании изменить в классе-наследнике функционал метода, который был унаследован от базового класса. В этом случае класс-наследник может переопределять методы и свойства базового класса.

7. Кому доступны переменные с модификатором protected?

Такой член класса доступен из любого места в текущем классе или в производных классах. При этом производные классы могут располагаться в других сборках.

8. Наследуются ли переменные с модификатором private?

Производному классу доступны public, internal, protected и protected internal члены базового класса (private – недоступны).

9. As, is – что это, как применяется?

Возвращает булевское значение, говорящее о том, можете ли вы преобразовать данное выражение в указанный тип – is.

As - позволяет преобразовывать тип в определенный ссылочный тип.

10. Поддерживает ли C# множественное наследование?

нет

11. Можно ли запретить наследование от класса?

Sealed class – запечатываем класс

12. Можно ли разрешить наследование класса, но запретить перекрытие метода?

Да. Запечатываем метод : sealed.

13. Что такое абстрактный класс?

Служит только для порождения потомков предоставляют базовый функционал для классов-наследников.

Задает интерфейс для всей иерархии

Может содержать и полностью определенные методы, переменные, конструкторы, свойства

Создавать объект абстрактного класса нельзя!!!!!!! (ссылку можно)

14. В каком случае вы обязаны объявить класс абстрактным?

Если класс имеет хотя бы одно абстрактное свойство или метод, то он должен быть определен как абстрактный.

15. В чем разница между абстрактными и виртуальными классами? Между виртуальными и абстрактными методами?

Вирт. Класс: полиморфный интерфейс в базовом классе набор членов класса, которые могут быть переопределены в классе-наследнике.

16. Какие компоненты класса могут быть виртуальными?

Методы, свойства, индексаторы.

17. Что такое интерфейс?

Позволяют определить требования к реализации (контракт). Задается набор абстрактных методов, свойств, событий и индексаторов, которые должны быть реализованы в производных классах

18. Как работать с объектом через унаследованный интерфейс?

Обращение - через объект класса, через интерфейсную ссылку.

19. Приведите пример явной реализации интерфейса.

interface IDo { void Sleep(); }

public class ExplicitDo : IDo

{ void IDo.Sleep() { } }

20. Почему нельзя указать модификатор видимости для методов интерфейса?

При применени интерфейса, как и при наследовании после имени класса или структуры указывается двоеточие и затем идут названия применяемых интерфейсов. При этом класс должен реализовать все методы и свойства применяемых интерфейсов. При этом поскольку все методы и свойства интерфейса являются публичными, при реализации этих методов и свойств в классе к ним можно применять только модификатор public.

21. Можно ли наследовать от нескольких интерфейсов?

да

22. Назовите отличия между интерфейсом и абстрактным классом.

Когда следует использовать абстрактные классы:

    Если надо определить общий функционал для родственных объектов

    Если мы проектируем довольно большую функциональную единицу, которая содержит много базового функционал

    Если нужно, чтобы все производные классы на всех уровнях наследования имели некоторую общую реализацию. При использовании абстрактных классов, если мы захотим изменить базовый функционал во всех наследниках, то достаточно поменять его в абстрактном базовом классе.

    Если же нам вдруг надо будет поменять название или параметры метода интерфейса, то придется вносить изменения и также во всех классы, которые данный интерфейс реализуют.

Когда следует использовать интерфейсы:

    Если нам надо определить функционал для группы разрозненных объектов, которые могут быть никак не связаны между собой.

    Если мы проектируем небольшой функциональный тип


23. Для чего используются стандартные интерфейсы ICloneable, IComparable, IComparer, lEnumerable?

24. 2

25. 3 + 4

26. А, на след. Стр. В

27. 1 (?)

28. 2, 5, 3 (?)

29. АВ

30. 3

31. 4 – нельзя создать об’ект абстрактного класса

32. 4

33. new G 
